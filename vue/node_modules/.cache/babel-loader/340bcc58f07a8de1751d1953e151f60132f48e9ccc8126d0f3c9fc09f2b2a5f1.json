{"ast":null,"code":"import 'd3';\nimport * as d3 from 'd3';\nimport 'topojson';\nimport DataMap from 'datamaps';\nimport { throttle } from \"src/util/throttle\";\nexport default {\n  data() {\n    return {\n      color1: '#AAAAAA',\n      color2: '#444444',\n      highlightFillColor: '#66615B',\n      highlightBorderColor: '#f1f1f1',\n      mapData: {\n        'AUS': 760,\n        'BRA': 550,\n        'CAN': 120,\n        'DEU': 1300,\n        'FRA': 540,\n        'GBR': 690,\n        'GEO': 200,\n        'IND': 200,\n        'ROU': 600,\n        'RUS': 300,\n        'USA': 2920\n      }\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3.scaleLinear().domain([0, length]).range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: \"#e4e4e4\"\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    initVectorMap() {\n      let {\n        fills,\n        mapData\n      } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: 'world',\n        element: document.getElementById(\"worldMap\"),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderWidth: 0.5,\n          borderOpacity: 0.8,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 0.5,\n          highlightBorderOpacity: 0.8\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener('resize', () => {\n        throttle(resizeFunc, 40);\n      }, false);\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};","map":{"version":3,"names":["d3","DataMap","throttle","data","color1","color2","highlightFillColor","highlightBorderColor","mapData","methods","generateColors","length","scaleLinear","domain","range","generateMapColors","mapDataValues","Object","values","maxVal","Math","max","colors","fills","defaultFill","key","val","fillKey","value","initVectorMap","worldMap","scope","element","document","getElementById","responsive","geographyConfig","borderWidth","borderOpacity","highlightBorderWidth","highlightBorderOpacity","resizeFunc","resize","bind","window","addEventListener","mounted"],"sources":["src/components/Dashboard/Views/Maps/WorldMap.vue"],"sourcesContent":["<template>\n  <div id=\"worldMap\" style=\"height: 300px;\"></div>\n</template>\n<script>\n  import 'd3';\n  import * as d3 from 'd3';\n  import 'topojson';\n  import DataMap from 'datamaps'\n  import { throttle } from \"src/util/throttle\";\n\n  export default {\n    data() {\n      return {\n        color1: '#AAAAAA',\n        color2: '#444444',\n        highlightFillColor: '#66615B',\n        highlightBorderColor: '#f1f1f1',\n        mapData: {\n          'AUS': 760,\n          'BRA': 550,\n          'CAN': 120,\n          'DEU': 1300,\n          'FRA': 540,\n          'GBR': 690,\n          'GEO': 200,\n          'IND': 200,\n          'ROU': 600,\n          'RUS': 300,\n          'USA': 2920\n        }\n      }\n    },\n    methods: {\n      generateColors(length) {\n        return d3.scaleLinear()\n          .domain([0, length])\n          .range([this.color1, this.color2]);\n      },\n      generateMapColors() {\n        let mapDataValues = Object.values(this.mapData);\n        let maxVal = Math.max(...mapDataValues);\n        let colors = this.generateColors(maxVal);\n        let mapData = {};\n        let fills = {\n          defaultFill: \"#e4e4e4\",\n        };\n        for (let key in this.mapData) {\n          let val = this.mapData[key];\n          fills[key] = colors(val);\n          mapData[key] = {\n            fillKey: key,\n            value: val\n          };\n        }\n        return {\n          mapData,\n          fills\n        }\n      },\n      initVectorMap() {\n        let { fills, mapData } = this.generateMapColors();\n        let worldMap = new DataMap({\n          scope: 'world',\n          element: document.getElementById(\"worldMap\"),\n          fills,\n          data: mapData,\n          responsive: true,\n          geographyConfig: {\n            borderWidth: 0.5,\n            borderOpacity: 0.8,\n            highlightFillColor: this.highlightFillColor,\n            highlightBorderColor: this.highlightBorderColor,\n            highlightBorderWidth: 0.5,\n            highlightBorderOpacity: 0.8\n          },\n        });\n        let resizeFunc = worldMap.resize.bind(worldMap);\n        window.addEventListener('resize', () => {\n          throttle(resizeFunc, 40)\n        }, false);\n      }\n    },\n    async mounted() {\n      this.initVectorMap()\n    }\n  }\n</script>\n<style>\n</style>\n"],"mappings":"AAIA;AACA,YAAAA,EAAA;AACA;AACA,OAAAC,OAAA;AACA,SAAAC,QAAA;AAEA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,MAAA;MACAC,kBAAA;MACAC,oBAAA;MACAC,OAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,MAAA;MACA,OAAAX,EAAA,CAAAY,WAAA,GACAC,MAAA,KAAAF,MAAA,GACAG,KAAA,OAAAV,MAAA,OAAAC,MAAA;IACA;IACAU,kBAAA;MACA,IAAAC,aAAA,GAAAC,MAAA,CAAAC,MAAA,MAAAV,OAAA;MACA,IAAAW,MAAA,GAAAC,IAAA,CAAAC,GAAA,IAAAL,aAAA;MACA,IAAAM,MAAA,QAAAZ,cAAA,CAAAS,MAAA;MACA,IAAAX,OAAA;MACA,IAAAe,KAAA;QACAC,WAAA;MACA;MACA,SAAAC,GAAA,SAAAjB,OAAA;QACA,IAAAkB,GAAA,QAAAlB,OAAA,CAAAiB,GAAA;QACAF,KAAA,CAAAE,GAAA,IAAAH,MAAA,CAAAI,GAAA;QACAlB,OAAA,CAAAiB,GAAA;UACAE,OAAA,EAAAF,GAAA;UACAG,KAAA,EAAAF;QACA;MACA;MACA;QACAlB,OAAA;QACAe;MACA;IACA;IACAM,cAAA;MACA;QAAAN,KAAA;QAAAf;MAAA,SAAAO,iBAAA;MACA,IAAAe,QAAA,OAAA7B,OAAA;QACA8B,KAAA;QACAC,OAAA,EAAAC,QAAA,CAAAC,cAAA;QACAX,KAAA;QACApB,IAAA,EAAAK,OAAA;QACA2B,UAAA;QACAC,eAAA;UACAC,WAAA;UACAC,aAAA;UACAhC,kBAAA,OAAAA,kBAAA;UACAC,oBAAA,OAAAA,oBAAA;UACAgC,oBAAA;UACAC,sBAAA;QACA;MACA;MACA,IAAAC,UAAA,GAAAX,QAAA,CAAAY,MAAA,CAAAC,IAAA,CAAAb,QAAA;MACAc,MAAA,CAAAC,gBAAA;QACA3C,QAAA,CAAAuC,UAAA;MACA;IACA;EACA;EACA,MAAAK,QAAA;IACA,KAAAjB,aAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}