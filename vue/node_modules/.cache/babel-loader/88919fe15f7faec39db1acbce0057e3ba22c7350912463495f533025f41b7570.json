{"ast":null,"code":"import FullCalendar from \"@fullcalendar/vue\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nimport Swal from \"sweetalert2\";\nexport default {\n  components: {\n    FullCalendar: FullCalendar\n  },\n  data: function data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        headerToolbar: {\n          center: \"dayGridMonth,timeGridWeek,timeGridDay\",\n          right: \"prev,next,today\"\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS,\n        editable: true,\n        selectable: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents\n      }\n    };\n  },\n  methods: {\n    handleWeekendsToggle: function handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends;\n    },\n    handleDateSelect: function handleDateSelect(selectInfo) {\n      var swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-success\",\n          cancelButton: \"btn btn-danger\"\n        },\n        buttonsStyling: false\n      });\n      swalWithBootstrapButtons.fire({\n        title: \"Create an Event\",\n        html: \"<input type=\\\"text\\\" id=\\\"md-input\\\" class=\\\"form-control\\\">\",\n        showCancelButton: true\n      }).then(function () {\n        var title = document.getElementById(\"md-input\").value;\n        var calendarApi = selectInfo.view.calendar;\n        calendarApi.unselect();\n        if (title) {\n          calendarApi.addEvent({\n            id: createEventId(),\n            title: title,\n            start: selectInfo.startStr,\n            end: selectInfo.endStr,\n            allDay: selectInfo.allDay\n          });\n        }\n      });\n    },\n    handleEventClick: function handleEventClick(clickInfo) {\n      if (confirm(\"Are you sure you want to delete the event '\".concat(clickInfo.event.title, \"'\"))) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents: function handleEvents(events) {\n      this.currentEvents = events;\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Swal","components","data","calendarOptions","plugins","headerToolbar","center","right","initialView","initialEvents","editable","selectable","select","handleDateSelect","eventClick","handleEventClick","eventsSet","handleEvents","methods","handleWeekendsToggle","weekends","selectInfo","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","html","showCancelButton","then","document","getElementById","value","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","clickInfo","confirm","concat","event","remove","events","currentEvents"],"sources":["src/components/Dashboard/Views/Calendar/Calendar.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-10 ml-auto mr-auto\">\n        <div class=\"card card-calendar\">\n          <div class=\"card-body\">\n            <fullCalendar ref=\"calendar\" :options=\"calendarOptions\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport FullCalendar from \"@fullcalendar/vue\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nimport Swal from \"sweetalert2\";\n\n  export default {\n    components: {\n      FullCalendar\n    },\n    data() {\n      return {\n        calendarOptions: {\n        plugins: [\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin, // needed for dateClick\n        ],\n        headerToolbar: {\n          center: \"dayGridMonth,timeGridWeek,timeGridDay\",\n          right: \"prev,next,today\",\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents,\n      },\n      }\n    },\n    methods: {\n      handleWeekendsToggle() {\n        this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n      },\n      handleDateSelect(selectInfo) {\n        // on select we show the Sweet Alert modal with an input\n        const swalWithBootstrapButtons = Swal.mixin({\n          customClass: {\n            confirmButton: \"btn btn-success\",\n            cancelButton: \"btn btn-danger\",\n          },\n          buttonsStyling: false,\n        });\n        swalWithBootstrapButtons\n          .fire({\n            title: \"Create an Event\",\n            html: `<input type=\"text\" id=\"md-input\" class=\"form-control\">`,\n            showCancelButton: true,\n          })\n          .then(() => {\n            var title = document.getElementById(\"md-input\").value;\n            let calendarApi = selectInfo.view.calendar;\n            calendarApi.unselect(); // clear date selection\n            if (title) {\n              calendarApi.addEvent({\n                id: createEventId(),\n                title,\n                start: selectInfo.startStr,\n                end: selectInfo.endStr,\n                allDay: selectInfo.allDay,\n              });\n            }\n          });\n      },\n      handleEventClick(clickInfo) {\n        if (\n          confirm(\n            `Are you sure you want to delete the event '${clickInfo.event.title}'`\n          )\n        ) {\n          clickInfo.event.remove();\n        }\n      },\n      handleEvents(events) {\n        this.currentEvents = events;\n      },\n    }\n  }\n</script>\n<style>\n  #fullCalendar {\n    min-height: 300px;\n  }\n\n  .el-loading-spinner .path {\n    stroke: #66615B !important;\n  }\n</style>\n"],"mappings":"AAcA,OAAAA,YAAA;AACA,OAAAC,aAAA;AACA,OAAAC,cAAA;AACA,OAAAC,iBAAA;AACA,SAAAC,cAAA,EAAAC,aAAA;AACA,OAAAC,IAAA;AAEA;EACAC,UAAA;IACAP,YAAA,EAAAA;EACA;EACAQ,IAAA,WAAAA,KAAA;IACA;MACAC,eAAA;QACAC,OAAA,GACAT,aAAA,EACAC,cAAA,EACAC,iBAAA,CACA;QACAQ,aAAA;UACAC,MAAA;UACAC,KAAA;QACA;QACAC,WAAA;QACAC,aAAA,EAAAX,cAAA;QACAY,QAAA;QACAC,UAAA;QACAC,MAAA,OAAAC,gBAAA;QACAC,UAAA,OAAAC,gBAAA;QACAC,SAAA,OAAAC;MACA;IACA;EACA;EACAC,OAAA;IACAC,oBAAA,WAAAA,qBAAA;MACA,KAAAhB,eAAA,CAAAiB,QAAA,SAAAjB,eAAA,CAAAiB,QAAA;IACA;IACAP,gBAAA,WAAAA,iBAAAQ,UAAA;MAEA,IAAAC,wBAAA,GAAAtB,IAAA,CAAAuB,KAAA;QACAC,WAAA;UACAC,aAAA;UACAC,YAAA;QACA;QACAC,cAAA;MACA;MACAL,wBAAA,CACAM,IAAA;QACAC,KAAA;QACAC,IAAA;QACAC,gBAAA;MACA,GACAC,IAAA;QACA,IAAAH,KAAA,GAAAI,QAAA,CAAAC,cAAA,aAAAC,KAAA;QACA,IAAAC,WAAA,GAAAf,UAAA,CAAAgB,IAAA,CAAAC,QAAA;QACAF,WAAA,CAAAG,QAAA;QACA,IAAAV,KAAA;UACAO,WAAA,CAAAI,QAAA;YACAC,EAAA,EAAA1C,aAAA;YACA8B,KAAA,EAAAA,KAAA;YACAa,KAAA,EAAArB,UAAA,CAAAsB,QAAA;YACAC,GAAA,EAAAvB,UAAA,CAAAwB,MAAA;YACAC,MAAA,EAAAzB,UAAA,CAAAyB;UACA;QACA;MACA;IACA;IACA/B,gBAAA,WAAAA,iBAAAgC,SAAA;MACA,IACAC,OAAA,+CAAAC,MAAA,CACAF,SAAA,CAAAG,KAAA,CAAArB,KAAA,MACA,GACA;QACAkB,SAAA,CAAAG,KAAA,CAAAC,MAAA;MACA;IACA;IACAlC,YAAA,WAAAA,aAAAmC,MAAA;MACA,KAAAC,aAAA,GAAAD,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}