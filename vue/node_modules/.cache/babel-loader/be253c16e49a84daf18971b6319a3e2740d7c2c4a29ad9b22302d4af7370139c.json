{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nexport default function authMiddleware(router) {\n  router.beforeEach((to, from, next) => {\n    let requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    let isGuest = to.matched.some(record => record.meta.isGuest);\n    let token = sessionStorage.getItem('Token');\n    console.log('rA: ', requiresAuth, 'iG: ', isGuest, 'token: ', token);\n    if (requiresAuth && !token) {\n      return next({\n        path: '/login'\n      });\n    } else if (token && isGuest) {\n      return next({\n        path: '/admin/overview'\n      });\n    } else {\n      let decodedToken = jwt_decode(token);\n      let {\n        user,\n        role\n      } = decodedToken;\n      let {\n        role: metaRole\n      } = to.meta;\n      console.log(\"Decoded Token: \", decodedToken);\n      console.log(\"role: \", role, \"  ||  user: \", user);\n      console.log(\"metaRole: \", metaRole);\n      let userId = sessionStorage.getItem('UserID');\n      return next();\n    }\n  });\n}","map":{"version":3,"names":["jwt_decode","authMiddleware","router","beforeEach","to","from","next","requiresAuth","matched","some","record","meta","isGuest","token","sessionStorage","getItem","console","log","path","decodedToken","user","role","metaRole","userId"],"sources":["/var/www/html/PRESTO/vue/src/auth.js"],"sourcesContent":["import jwt_decode from 'jwt-decode'\n\nexport default function authMiddleware(router) {\n  router.beforeEach((to, from, next) => {\n    let requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    let isGuest = to.matched.some(record => record.meta.isGuest);\n    let token = sessionStorage.getItem('Token');\n    console.log('rA: ', requiresAuth, 'iG: ', isGuest, 'token: ', token)\n    if (requiresAuth && !token){\n        return next({path: '/login'});\n    } else if (token && isGuest){\n        return next({path: '/admin/overview'});\n    } else {\n    let decodedToken = jwt_decode(token);\n    let { user, role } = decodedToken;\n    let { role: metaRole } = to.meta;\n    console.log(\"Decoded Token: \", decodedToken);\n    console.log(\"role: \", role, \"  ||  user: \", user);\n    console.log(\"metaRole: \", metaRole);\n    let userId = sessionStorage.getItem('UserID');\n    return next();\n    }\n    \n  })\n}"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AAEnC,eAAe,SAASC,cAAcA,CAACC,MAAM,EAAE;EAC7CA,MAAM,CAACC,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACpC,IAAIC,YAAY,GAAGH,EAAE,CAACI,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC;IACtE,IAAIK,OAAO,GAAGR,EAAE,CAACI,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACC,OAAO,CAAC;IAC5D,IAAIC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEV,YAAY,EAAE,MAAM,EAAEK,OAAO,EAAE,SAAS,EAAEC,KAAK,CAAC;IACpE,IAAIN,YAAY,IAAI,CAACM,KAAK,EAAC;MACvB,OAAOP,IAAI,CAAC;QAACY,IAAI,EAAE;MAAQ,CAAC,CAAC;IACjC,CAAC,MAAM,IAAIL,KAAK,IAAID,OAAO,EAAC;MACxB,OAAON,IAAI,CAAC;QAACY,IAAI,EAAE;MAAiB,CAAC,CAAC;IAC1C,CAAC,MAAM;MACP,IAAIC,YAAY,GAAGnB,UAAU,CAACa,KAAK,CAAC;MACpC,IAAI;QAAEO,IAAI;QAAEC;MAAK,CAAC,GAAGF,YAAY;MACjC,IAAI;QAAEE,IAAI,EAAEC;MAAS,CAAC,GAAGlB,EAAE,CAACO,IAAI;MAChCK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,YAAY,CAAC;MAC5CH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEI,IAAI,EAAE,cAAc,EAAED,IAAI,CAAC;MACjDJ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEK,QAAQ,CAAC;MACnC,IAAIC,MAAM,GAAGT,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC7C,OAAOT,IAAI,CAAC,CAAC;IACb;EAEF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}