{"ast":null,"code":"import axios from \"axios\";\nconst axiosClient = axios.create({\n  baseURL: `http://192.168.0.7:3030/api`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  withCredentials: false\n});\nexport default axiosClient;","map":{"version":3,"names":["axios","axiosClient","create","baseURL","headers","xsrfCookieName","xsrfHeaderName","withCredentials"],"sources":["/var/www/html/PRESTO/vue/src/axios.js"],"sourcesContent":["import axios from \"axios\";\n\nconst axiosClient = axios.create({\n  baseURL: `http://192.168.0.7:3030/api`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n    },\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN',\n    withCredentials: false\n\n});\n\n// axiosClient.interceptors.request.use(config => {\n//   config.headers.Authorization = `Bearer ${store.state.user.token}`\n//   return config;\n// })\n\n// axiosClient.interceptors.response.use(response => {\n//   return response;\n// }, error => {\n//   if (error.response.status === 401) {\n//     sessionStorage.removeItem('TOKEN')\n//     router.push({name: 'Login'})\n//   } else if (error.response.status === 404) {\n//     router.push({name: 'NotFound'})\n//   }\n//   return error;\n// })\n\nexport default axiosClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAG,6BAA4B;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE;EAC/B,CAAC;EACDC,cAAc,EAAE,YAAY;EAC5BC,cAAc,EAAE,cAAc;EAC9BC,eAAe,EAAE;AAErB,CAAC,CAAC;AAmBF,eAAeN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}