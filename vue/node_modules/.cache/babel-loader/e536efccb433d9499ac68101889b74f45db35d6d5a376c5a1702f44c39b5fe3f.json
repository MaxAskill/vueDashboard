{"ast":null,"code":"export default {\n  inheritAttrs: false,\n  name: 'fg-input',\n  props: {\n    required: {\n      type: Boolean,\n      description: 'Whether input is required (adds an asterix *)'\n    },\n    label: {\n      type: String,\n      description: 'Input label (text before input)'\n    },\n    error: {\n      type: String,\n      description: 'Input error (below input)'\n    },\n    labelClasses: {\n      type: String,\n      description: 'Input label css classes'\n    },\n    inputClasses: {\n      type: String,\n      description: 'Input css classes'\n    },\n    value: {\n      type: [String, Number],\n      description: 'Input value'\n    },\n    addonRightIcon: {\n      type: String,\n      description: 'Addon right icon'\n    },\n    addonLeftIcon: {\n      type: String,\n      description: 'Addont left icon'\n    }\n  },\n  data() {\n    return {\n      touched: false,\n      focused: false,\n      hadError: false\n    };\n  },\n  computed: {\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.updateValue,\n        focus: this.onFocus,\n        blur: this.onBlur\n      };\n    },\n    hasSuccess() {\n      return this.hadError && this.touched && !this.error;\n    },\n    hasIcon() {\n      const {\n        addonRight,\n        addonLeft\n      } = this.$slots;\n      return addonRight !== undefined || addonLeft !== undefined || this.addonRightIcon !== undefined || this.addonLeftIcon !== undefined;\n    }\n  },\n  methods: {\n    updateValue(evt) {\n      let value = evt.target.value;\n      if (!this.touched && value) {\n        this.touched = true;\n      }\n      this.$emit('input', value);\n    },\n    onFocus(value) {\n      this.focused = true;\n      this.$emit('focus', value);\n    },\n    onBlur(value) {\n      this.focused = false;\n      this.$emit('blur', value);\n    }\n  },\n  created() {\n    this.$watch('error', newVal => {\n      if (newVal) {\n        this.hadError = true;\n      }\n    }, {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"names":["inheritAttrs","name","props","required","type","Boolean","description","label","String","error","labelClasses","inputClasses","value","Number","addonRightIcon","addonLeftIcon","data","touched","focused","hadError","computed","listeners","$listeners","input","updateValue","focus","onFocus","blur","onBlur","hasSuccess","hasIcon","addonRight","addonLeft","$slots","undefined","methods","evt","target","$emit","created","$watch","newVal","immediate"],"sources":["src/components/UIComponents/Inputs/formGroupInput.vue"],"sourcesContent":["<template>\n  <div class=\"form-group\"\n       :class=\"[\n       {'input-group': hasIcon},\n       {'has-danger': error},\n       {'input-group-focus': focused},\n       {'has-label': label || $slots.label},\n       {'has-success': hasSuccess}]\">\n    <slot name=\"label\">\n      <label v-if=\"label\" :class=\"labelClasses\">\n        {{label}}\n        <span class=\"text-danger\" v-if=\"required\">*</span>\n      </label>\n    </slot>\n\n\n    <div v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\">\n          <slot name=\"addonLeft\">\n            <i :class=\"addonLeftIcon\"></i>\n          </slot>\n        </span>\n    </div>\n    <slot>\n      <input\n        :value=\"value\"\n        v-on=\"listeners\"\n        v-bind=\"$attrs\"\n        class=\"form-control\"\n        :required=\"required\"\n        :class=\"[{'is-valid': hasSuccess}, inputClasses, {'is-invalid': error}]\"\n        aria-describedby=\"addon-right addon-left\">\n    </slot>\n    <div v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-append\">\n          <span class=\"input-group-text\">\n              <slot name=\"addonRight\">\n                  <i :class=\"addonRightIcon\"></i>\n              </slot>\n          </span>\n    </div>\n    <slot name=\"infoBlock\"></slot>\n    <slot name=\"helpBlock\">\n      <div class=\"invalid-feedback error-text\" :class=\"{'mt-2': hasIcon}\" v-if=\"error\">\n        {{ error }}\n      </div>\n    </slot>\n  </div>\n</template>\n<script>\n  export default {\n    inheritAttrs: false,\n    name: 'fg-input',\n    props: {\n      required: {\n        type: Boolean,\n        description: 'Whether input is required (adds an asterix *)'\n      },\n      label: {\n        type: String,\n        description: 'Input label (text before input)'\n      },\n      error: {\n        type: String,\n        description: 'Input error (below input)'\n      },\n      labelClasses: {\n        type: String,\n        description: 'Input label css classes'\n      },\n      inputClasses: {\n        type: String,\n        description: 'Input css classes'\n      },\n      value: {\n        type: [String, Number],\n        description: 'Input value'\n      },\n      addonRightIcon: {\n        type: String,\n        description: 'Addon right icon'\n      },\n      addonLeftIcon: {\n        type: String,\n        description: 'Addont left icon'\n      }\n    },\n    data() {\n      return {\n        touched: false,\n        focused: false,\n        hadError: false\n      }\n    },\n    computed: {\n      listeners() {\n        return {\n          ...this.$listeners,\n          input: this.updateValue,\n          focus: this.onFocus,\n          blur: this.onBlur\n        }\n      },\n      hasSuccess() {\n        return this.hadError && this.touched && !this.error\n      },\n      hasIcon() {\n        const { addonRight, addonLeft } = this.$slots\n        return addonRight !== undefined || addonLeft !== undefined || this.addonRightIcon !== undefined || this.addonLeftIcon !== undefined\n      }\n    },\n    methods: {\n      updateValue(evt) {\n        let value = evt.target.value\n        if (!this.touched && value) {\n          this.touched = true\n        }\n        this.$emit('input', value)\n      },\n      onFocus(value) {\n        this.focused = true;\n        this.$emit('focus', value);\n      },\n      onBlur(value) {\n        this.focused = false;\n        this.$emit('blur', value);\n      }\n    },\n    created() {\n      this.$watch('error', (newVal) => {\n        if(newVal){\n          this.hadError = true;\n        }\n      }, {immediate: true})\n    }\n  }\n</script>\n<style scoped>\n.error-text {\n  display: block;\n}\n</style>\n"],"mappings":"AAiDA;EACAA,YAAA;EACAC,IAAA;EACAC,KAAA;IACAC,QAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,WAAA;IACA;IACAC,KAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;IACAG,KAAA;MACAL,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;IACAI,YAAA;MACAN,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;IACAK,YAAA;MACAP,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;IACAM,KAAA;MACAR,IAAA,GAAAI,MAAA,EAAAK,MAAA;MACAP,WAAA;IACA;IACAQ,cAAA;MACAV,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;IACAS,aAAA;MACAX,IAAA,EAAAI,MAAA;MACAF,WAAA;IACA;EACA;EACAU,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA;QACA,QAAAC,UAAA;QACAC,KAAA,OAAAC,WAAA;QACAC,KAAA,OAAAC,OAAA;QACAC,IAAA,OAAAC;MACA;IACA;IACAC,WAAA;MACA,YAAAV,QAAA,SAAAF,OAAA,UAAAR,KAAA;IACA;IACAqB,QAAA;MACA;QAAAC,UAAA;QAAAC;MAAA,SAAAC,MAAA;MACA,OAAAF,UAAA,KAAAG,SAAA,IAAAF,SAAA,KAAAE,SAAA,SAAApB,cAAA,KAAAoB,SAAA,SAAAnB,aAAA,KAAAmB,SAAA;IACA;EACA;EACAC,OAAA;IACAX,YAAAY,GAAA;MACA,IAAAxB,KAAA,GAAAwB,GAAA,CAAAC,MAAA,CAAAzB,KAAA;MACA,UAAAK,OAAA,IAAAL,KAAA;QACA,KAAAK,OAAA;MACA;MACA,KAAAqB,KAAA,UAAA1B,KAAA;IACA;IACAc,QAAAd,KAAA;MACA,KAAAM,OAAA;MACA,KAAAoB,KAAA,UAAA1B,KAAA;IACA;IACAgB,OAAAhB,KAAA;MACA,KAAAM,OAAA;MACA,KAAAoB,KAAA,SAAA1B,KAAA;IACA;EACA;EACA2B,QAAA;IACA,KAAAC,MAAA,UAAAC,MAAA;MACA,IAAAA,MAAA;QACA,KAAAtB,QAAA;MACA;IACA;MAAAuB,SAAA;IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}