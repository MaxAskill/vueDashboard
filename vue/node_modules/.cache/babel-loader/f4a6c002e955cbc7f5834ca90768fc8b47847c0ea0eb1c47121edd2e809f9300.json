{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nfunction redirectToMainPage(next) {\n  return next({\n    path: '/'\n  });\n}\nexport default function authMiddleware(router) {\n  router.beforeEach((to, from, next) => {\n    let requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    if (!requiresAuth) {\n      return next();\n    }\n    let token = localStorage.getItem('token');\n    if (!token) {\n      return next({\n        path: '/login'\n      });\n    }\n    try {\n      let decodedToken = jwtDecode(token);\n      let {\n        user,\n        role\n      } = decodedToken;\n      let {\n        role: metaRole\n      } = to.meta;\n      let userId = localStorage.getItem('userId');\n      if (user === userId) {\n        if (role && metaRole && role !== metaRole) {\n          return redirectToMainPage(next);\n        }\n        return next();\n      } else {\n        redirectToMainPage(next);\n      }\n    } catch (err) {\n      redirectToMainPage(next);\n    }\n  });\n}","map":{"version":3,"names":["jwtDecode","redirectToMainPage","next","path","authMiddleware","router","beforeEach","to","from","requiresAuth","matched","some","record","meta","token","localStorage","getItem","decodedToken","user","role","metaRole","userId","err"],"sources":["/var/www/html/PRESTO/vue/src/auth.js"],"sourcesContent":["import jwtDecode from 'jwt-decode'\n\nfunction redirectToMainPage(next) {\n  // You can display a notification here if needed\n  return next({path: '/'});\n}\n\n/**\n * Middleware to check if user has the correct right to access a certain page.\n * Checks are performed based on route meta fields `meta: { requiresAuth: true }`.\n * @param {object} router Vue router instance\n */\nexport default function authMiddleware(router) {\n  router.beforeEach((to, from, next) => {\n    // check for the routes that have `requiresAuth: true`\n    let requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    if (!requiresAuth) {\n      return next();\n    }\n    let token = localStorage.getItem('token');\n    if (!token) {\n      return next({path: '/login'});\n    }\n    try {\n      let decodedToken = jwtDecode(token);\n      let { user, role } = decodedToken;\n      let { role: metaRole } = to.meta;\n      let userId = localStorage.getItem('userId');\n      if (user === userId) {\n        if(role && metaRole && role !== metaRole){\n          return redirectToMainPage(next);\n        }\n        return next()\n      } else {\n        redirectToMainPage(next);\n      }\n    } catch (err) {\n      redirectToMainPage(next);\n    }\n  })\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAElC,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAEhC,OAAOA,IAAI,CAAC;IAACC,IAAI,EAAE;EAAG,CAAC,CAAC;AAC1B;AAOA,eAAe,SAASC,cAAcA,CAACC,MAAM,EAAE;EAC7CA,MAAM,CAACC,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEN,IAAI,KAAK;IAEpC,IAAIO,YAAY,GAAGF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC;IACtE,IAAI,CAACA,YAAY,EAAE;MACjB,OAAOP,IAAI,CAAC,CAAC;IACf;IACA,IAAIY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAI,CAACF,KAAK,EAAE;MACV,OAAOZ,IAAI,CAAC;QAACC,IAAI,EAAE;MAAQ,CAAC,CAAC;IAC/B;IACA,IAAI;MACF,IAAIc,YAAY,GAAGjB,SAAS,CAACc,KAAK,CAAC;MACnC,IAAI;QAAEI,IAAI;QAAEC;MAAK,CAAC,GAAGF,YAAY;MACjC,IAAI;QAAEE,IAAI,EAAEC;MAAS,CAAC,GAAGb,EAAE,CAACM,IAAI;MAChC,IAAIQ,MAAM,GAAGN,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC3C,IAAIE,IAAI,KAAKG,MAAM,EAAE;QACnB,IAAGF,IAAI,IAAIC,QAAQ,IAAID,IAAI,KAAKC,QAAQ,EAAC;UACvC,OAAOnB,kBAAkB,CAACC,IAAI,CAAC;QACjC;QACA,OAAOA,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACLD,kBAAkB,CAACC,IAAI,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;MACZrB,kBAAkB,CAACC,IAAI,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}