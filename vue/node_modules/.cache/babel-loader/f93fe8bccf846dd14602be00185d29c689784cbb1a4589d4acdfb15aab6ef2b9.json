{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport jwtDecode from 'jwt-decode';\nfunction redirectToMainPage(next) {\n  return next({\n    path: '/'\n  });\n}\nexport default function authMiddleware(router) {\n  router.beforeEach(function (to, from, next) {\n    var requiresAuth = to.matched.some(function (record) {\n      return record.meta.requiresAuth;\n    });\n    if (!requiresAuth) {\n      return next();\n    }\n    var token = sessionStorage.getItem('Token');\n    if (!token) {\n      return next({\n        path: '/login'\n      });\n    }\n    try {\n      var decodedToken = jwtDecode(token);\n      var user = decodedToken.user,\n        role = decodedToken.role;\n      var metaRole = to.meta.role;\n      console.log(\"Decoded Token: \", decodedToken);\n      console.log(\"role: \", role, \"  ||  user: \", user);\n      console.log(\"metaRole: \", metaRole);\n      var userId = sessionStorage.getItem('UserID');\n    } catch (err) {\n      redirectToMainPage(next);\n    }\n  });\n}","map":{"version":3,"names":["jwtDecode","redirectToMainPage","next","path","authMiddleware","router","beforeEach","to","from","requiresAuth","matched","some","record","meta","token","sessionStorage","getItem","decodedToken","user","role","metaRole","console","log","userId","err"],"sources":["/var/www/html/PRESTO/vue/src/auth.js"],"sourcesContent":["import jwtDecode from 'jwt-decode'\n\nfunction redirectToMainPage(next) {\n  // You can display a notification here if needed\n  return next({path: '/'});\n}\n\n/**\n * Middleware to check if user has the correct right to access a certain page.\n * Checks are performed based on route meta fields `meta: { requiresAuth: true }`.\n * @param {object} router Vue router instance\n */\nexport default function authMiddleware(router) {\n  router.beforeEach((to, from, next) => {\n    // check for the routes that have `requiresAuth: true`\n    let requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    if (!requiresAuth) {\n      return next();\n    }\n    let token = sessionStorage.getItem('Token');\n    if (!token) {\n      return next({path: '/login'});\n    }\n    try {\n      let decodedToken = jwtDecode(token);\n      let { user, role } = decodedToken;\n      let { role: metaRole } = to.meta;\n      console.log(\"Decoded Token: \", decodedToken);\n      console.log(\"role: \", role, \"  ||  user: \", user);\n      console.log(\"metaRole: \", metaRole);\n      let userId = sessionStorage.getItem('UserID');\n    //   if (user === userId) {\n    //     if(role && metaRole && role !== metaRole){\n    //       return redirectToMainPage(next);\n    //     }\n    //     return next()\n    //   } else {\n    //     redirectToMainPage(next);\n    //   }\n    } catch (err) {\n      redirectToMainPage(next);\n    }\n  })\n}"],"mappings":";AAAA,OAAOA,SAAS,MAAM,YAAY;AAElC,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAEhC,OAAOA,IAAI,CAAC;IAACC,IAAI,EAAE;EAAG,CAAC,CAAC;AAC1B;AAOA,eAAe,SAASC,cAAcA,CAACC,MAAM,EAAE;EAC7CA,MAAM,CAACC,UAAU,CAAC,UAACC,EAAE,EAAEC,IAAI,EAAEN,IAAI,EAAK;IAEpC,IAAIO,YAAY,GAAGF,EAAE,CAACG,OAAO,CAACC,IAAI,CAAC,UAAAC,MAAM;MAAA,OAAIA,MAAM,CAACC,IAAI,CAACJ,YAAY;IAAA,EAAC;IACtE,IAAI,CAACA,YAAY,EAAE;MACjB,OAAOP,IAAI,CAAC,CAAC;IACf;IACA,IAAIY,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,OAAOZ,IAAI,CAAC;QAACC,IAAI,EAAE;MAAQ,CAAC,CAAC;IAC/B;IACA,IAAI;MACF,IAAIc,YAAY,GAAGjB,SAAS,CAACc,KAAK,CAAC;MACnC,IAAMI,IAAI,GAAWD,YAAY,CAA3BC,IAAI;QAAEC,IAAI,GAAKF,YAAY,CAArBE,IAAI;MAChB,IAAYC,QAAQ,GAAKb,EAAE,CAACM,IAAI,CAA1BM,IAAI;MACVE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,YAAY,CAAC;MAC5CI,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,IAAI,EAAE,cAAc,EAAED,IAAI,CAAC;MACjDG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAAC;MACnC,IAAIG,MAAM,GAAGR,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAS/C,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZvB,kBAAkB,CAACC,IAAI,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}