{"ast":null,"code":"export default {\n  name: 'p-pagination',\n  props: {\n    type: {\n      type: String,\n      default: 'default',\n      description: 'Pagination type (primary|info|danger|default|warning|success)'\n    },\n    pageCount: {\n      type: Number,\n      default: 0,\n      description: 'Pagination page count. This should be specified in combination with perPage'\n    },\n    perPage: {\n      type: Number,\n      default: 10,\n      description: 'Pagination per page. Should be specified with total or pageCount'\n    },\n    total: {\n      type: Number,\n      default: 0,\n      description: 'Can be specified instead of pageCount. The page count in this case will be total/perPage'\n    },\n    value: {\n      type: Number,\n      default: 1,\n      description: 'Pagination value'\n    }\n  },\n  computed: {\n    paginationClass() {\n      return `pagination-${this.type}`;\n    },\n    totalPages() {\n      if (this.pageCount > 0) return this.pageCount;\n      if (this.total > 0) {\n        return Math.ceil(this.total / this.perPage);\n      }\n      return 1;\n    },\n    pagesToDisplay() {\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\n        return this.totalPages;\n      }\n      return this.defaultPagesToDisplay;\n    },\n    minPage() {\n      if (this.value >= this.pagesToDisplay) {\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage > this.totalPages) {\n          return this.totalPages - this.pagesToDisplay + 1;\n        }\n        return this.value - pagesToAdd;\n      } else {\n        return 1;\n      }\n    },\n    maxPage() {\n      if (this.value >= this.pagesToDisplay) {\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage < this.totalPages) {\n          return newMaxPage;\n        } else {\n          return this.totalPages;\n        }\n      } else {\n        return this.pagesToDisplay;\n      }\n    }\n  },\n  data() {\n    return {\n      defaultPagesToDisplay: 5\n    };\n  },\n  methods: {\n    range(min, max) {\n      let arr = [];\n      for (let i = min; i <= max; i++) {\n        arr.push(i);\n      }\n      return arr;\n    },\n    changePage(item) {\n      this.$emit('input', item);\n    },\n    nextPage() {\n      if (this.value < this.totalPages) {\n        this.$emit('input', this.value + 1);\n      }\n    },\n    prevPage() {\n      if (this.value > 1) {\n        this.$emit('input', this.value - 1);\n      }\n    }\n  },\n  watch: {\n    perPage(value) {\n      this.$emit('input', 1);\n    },\n    total(value) {\n      this.$emit('input', 1);\n    }\n  }\n};","map":{"version":3,"names":["name","props","type","String","default","description","pageCount","Number","perPage","total","value","computed","paginationClass","totalPages","Math","ceil","pagesToDisplay","defaultPagesToDisplay","minPage","pagesToAdd","floor","newMaxPage","maxPage","data","methods","range","min","max","arr","i","push","changePage","item","$emit","nextPage","prevPage","watch"],"sources":["src/components/UIComponents/Pagination.vue"],"sourcesContent":["<template>\n  <ul class=\"pagination\" :class=\"paginationClass\">\n    <li class=\"page-item prev-page\" :class=\"{disabled: value === 1}\">\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i></span>\n      </a>\n    </li>\n    <li class=\"page-item\" :class=\"{active: value === item}\" v-for=\"item in range(minPage, maxPage)\">\n      <a class=\"page-link\" @click=\"changePage(item)\">{{item}}</a>\n    </li>\n    <li class=\"page-item next-page\" :class=\"{disabled: value === totalPages}\">\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></span>\n      </a>\n    </li>\n  </ul>\n</template>\n<script>\n  export default {\n    name: 'p-pagination',\n    props: {\n      type: {\n        type: String,\n        default: 'default',\n        description: 'Pagination type (primary|info|danger|default|warning|success)'\n      },\n      pageCount: {\n        type: Number,\n        default: 0,\n        description: 'Pagination page count. This should be specified in combination with perPage'\n      },\n      perPage: {\n        type: Number,\n        default: 10,\n        description: 'Pagination per page. Should be specified with total or pageCount'\n      },\n      total: {\n        type: Number,\n        default: 0,\n        description: 'Can be specified instead of pageCount. The page count in this case will be total/perPage'\n      },\n      value: {\n        type: Number,\n        default: 1,\n        description: 'Pagination value'\n      }\n    },\n    computed: {\n      paginationClass() {\n        return `pagination-${this.type}`\n      },\n      totalPages() {\n        if (this.pageCount > 0) return this.pageCount\n        if (this.total > 0) {\n          return Math.ceil(this.total / this.perPage)\n        }\n        return 1\n      },\n      pagesToDisplay() {\n        if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\n          return this.totalPages\n        }\n        return this.defaultPagesToDisplay\n      },\n      minPage() {\n        if (this.value >= this.pagesToDisplay) {\n          const pagesToAdd = Math.floor(this.pagesToDisplay / 2)\n          const newMaxPage = pagesToAdd + this.value\n          if (newMaxPage > this.totalPages) {\n            return this.totalPages - this.pagesToDisplay + 1\n          }\n          return this.value - pagesToAdd\n        } else {\n          return 1\n        }\n      },\n      maxPage() {\n        if (this.value >= this.pagesToDisplay) {\n          const pagesToAdd = Math.floor(this.pagesToDisplay / 2)\n          const newMaxPage = pagesToAdd + this.value\n          if (newMaxPage < this.totalPages) {\n            return newMaxPage\n          } else {\n            return this.totalPages\n          }\n        } else {\n          return this.pagesToDisplay\n        }\n      }\n    },\n    data() {\n      return {\n        defaultPagesToDisplay: 5\n      }\n    },\n    methods: {\n      range(min, max) {\n        let arr = []\n        for (let i = min; i <= max; i++) {\n          arr.push(i)\n        }\n        return arr\n      },\n      changePage(item) {\n        this.$emit('input', item)\n      },\n      nextPage() {\n        if (this.value < this.totalPages) {\n          this.$emit('input', this.value + 1)\n        }\n      },\n      prevPage() {\n        if (this.value > 1) {\n          this.$emit('input', this.value - 1)\n        }\n      }\n    },\n    watch: {\n      perPage(value) {\n        this.$emit('input', 1)\n      },\n      total(value) {\n        this.$emit('input', 1)\n      }\n    }\n  }\n</script>\n"],"mappings":"AAkBA;EACAA,IAAA;EACAC,KAAA;IACAC,IAAA;MACAA,IAAA,EAAAC,MAAA;MACAC,OAAA;MACAC,WAAA;IACA;IACAC,SAAA;MACAJ,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAC,WAAA;IACA;IACAG,OAAA;MACAN,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAC,WAAA;IACA;IACAI,KAAA;MACAP,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAC,WAAA;IACA;IACAK,KAAA;MACAR,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAC,WAAA;IACA;EACA;EACAM,QAAA;IACAC,gBAAA;MACA,0BAAAV,IAAA;IACA;IACAW,WAAA;MACA,SAAAP,SAAA,kBAAAA,SAAA;MACA,SAAAG,KAAA;QACA,OAAAK,IAAA,CAAAC,IAAA,MAAAN,KAAA,QAAAD,OAAA;MACA;MACA;IACA;IACAQ,eAAA;MACA,SAAAH,UAAA,aAAAA,UAAA,QAAAI,qBAAA;QACA,YAAAJ,UAAA;MACA;MACA,YAAAI,qBAAA;IACA;IACAC,QAAA;MACA,SAAAR,KAAA,SAAAM,cAAA;QACA,MAAAG,UAAA,GAAAL,IAAA,CAAAM,KAAA,MAAAJ,cAAA;QACA,MAAAK,UAAA,GAAAF,UAAA,QAAAT,KAAA;QACA,IAAAW,UAAA,QAAAR,UAAA;UACA,YAAAA,UAAA,QAAAG,cAAA;QACA;QACA,YAAAN,KAAA,GAAAS,UAAA;MACA;QACA;MACA;IACA;IACAG,QAAA;MACA,SAAAZ,KAAA,SAAAM,cAAA;QACA,MAAAG,UAAA,GAAAL,IAAA,CAAAM,KAAA,MAAAJ,cAAA;QACA,MAAAK,UAAA,GAAAF,UAAA,QAAAT,KAAA;QACA,IAAAW,UAAA,QAAAR,UAAA;UACA,OAAAQ,UAAA;QACA;UACA,YAAAR,UAAA;QACA;MACA;QACA,YAAAG,cAAA;MACA;IACA;EACA;EACAO,KAAA;IACA;MACAN,qBAAA;IACA;EACA;EACAO,OAAA;IACAC,MAAAC,GAAA,EAAAC,GAAA;MACA,IAAAC,GAAA;MACA,SAAAC,CAAA,GAAAH,GAAA,EAAAG,CAAA,IAAAF,GAAA,EAAAE,CAAA;QACAD,GAAA,CAAAE,IAAA,CAAAD,CAAA;MACA;MACA,OAAAD,GAAA;IACA;IACAG,WAAAC,IAAA;MACA,KAAAC,KAAA,UAAAD,IAAA;IACA;IACAE,SAAA;MACA,SAAAxB,KAAA,QAAAG,UAAA;QACA,KAAAoB,KAAA,eAAAvB,KAAA;MACA;IACA;IACAyB,SAAA;MACA,SAAAzB,KAAA;QACA,KAAAuB,KAAA,eAAAvB,KAAA;MACA;IACA;EACA;EACA0B,KAAA;IACA5B,QAAAE,KAAA;MACA,KAAAuB,KAAA;IACA;IACAxB,MAAAC,KAAA;MACA,KAAAuB,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}